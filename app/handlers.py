from aiogram import F
from aiogram import Router, types
from aiogram.types import CallbackQuery, Message
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database.requests import (set_user, get_area_by_id, get_items_by_city, get_category_by_id, 
                                   get_items_by_city, get_are_by_id, get_item_by_id, create_order)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import spb_info, trc_info, btc_info, tg_admin, operator_username, operator_link, image_url, channel_link, chat_link
from random import choice, randint
from aiogram.utils.markdown import link
from bot import bot
import app.keyboards as kb
router = Router()
psip = ["–ú–∞–≥–Ω–∏—Ç üß≤", "–¢–∞–π–Ω–∏–∫ ü™®", "–ü—Ä–∏–∫–æ–øü™π" ]

class UserChoice(StatesGroup):
    city = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    item = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞

class OrderInfo(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    item_name = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    city_name = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    area_name = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞
    price = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã
    order_number = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞

class CheckPayment(StatesGroup):
    userid = State()
    user_message = State()
    payment_method = State()
    
class OrderProcess(StatesGroup):
    city = State()
    item = State()
    area = State()
    confirm = State()
    payment_method = State()
    payment_proof = State()
    order_number = State()  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    
class ChooseCity(StatesGroup):
    waiting_for_city_name = State()

@router.message(CommandStart())
@router.callback_query(F.data == 'to_main')
async def cmd_start(message: Message | CallbackQuery, state: FSMContext):
    if isinstance(message, Message):
        await set_user(message.from_user.id)
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã:',
                             reply_markup=await kb.generate_cities_button())
    else: 
        await message.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã:',
                             reply_markup=await kb.generate_cities_button())

@router.callback_query(kb.PageCallback.filter())
async def page_navigate(callback: CallbackQuery, callback_data: kb.PageCallback):
    await callback.message.edit_reply_markup(reply_markup=await kb.generate_cities_button(page=callback_data.number))
    await callback.answer()


async def send_order_info_to_admin(order_info):
    admin_id = tg_admin[0]  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_info}"
    item_info = f"–¢–æ–≤–∞—Ä: {order_info['item_name']}, –ì–æ—Ä–æ–¥: {order_info['city_name']}, –†–∞–π–æ–Ω: {order_info['area_name']}, –¶–µ–Ω–∞: {order_info['price']}"
    await bot.send_message(admin_id, order_text + "\n" + item_info)


@router.callback_query(F.data.startswith('category_'))
async def choose_city(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split('_')[1])
    await state.update_data(city=city_id)
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ', reply_markup=await kb.generate_items_button(int(callback.data.split('_')[1])))

@router.callback_query(F.data.startswith('item_'))
async def choose_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split('_')[1])
    item = await get_item_by_id(item_id)
    await state.update_data(item=item_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(OrderProcess.area)
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: ', reply_markup=await kb.generate_areas_button(item.category))

@router.callback_query(lambda call: call.data.startswith('area_') or call.data.startswith('yes') or call.data.startswith('pay_sbp') or call.data.startswith('pay_usdt') or call.data.startswith('pay_btc'))
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    item_id = state_data.get('item')

    if callback.data.startswith('area_'):
        area_id = int(callback.data.split('_')[1])
        area = await get_area_by_id(area_id)
        if area is None:
            await callback.answer("–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        category = area.category_rel
        item = await get_item_by_id(item_id)
        if item is None:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        stash_type = choice(psip)
        await state.update_data(area=area_id, stash_type=stash_type)

        text = (f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?*\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"`–ì–æ—Ä–æ–¥: {category.name}`\n"
                f"`–†–∞–π–æ–Ω: {area.name.rstrip()}`\n"
                f"`–¢–æ–≤–∞—Ä: {item.name}`\n"
                f"`–¢–∏–ø –∫–ª–∞–¥–∞: {stash_type}`\n"
                f"`–¶–µ–Ω–∞: {item.price}‚ÇΩ`\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                "*–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞' –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑!*")
        await callback.message.edit_text(text=text, reply_markup=await kb.create_confirmation_buttons(), parse_mode='Markdown')
    
    elif callback.data.startswith('yes'):
        item = await get_item_by_id(item_id)
        if item is None:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        area_id = state_data.get('area')
        area = await get_area_by_id(area_id)
        if area is None:
            await callback.answer("–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        category = area.category_rel
        stash_type = state_data.get('stash_type')
        order_number = randint(7000, 120000)  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞

        await state.update_data(order_number=order_number)
        await create_order(callback.from_user.id, item_id, area_id, order_number)

    # –í–∞—à –∫–æ–¥...


        text = (f"*–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!*\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"–ó–∞–∫–∞–∑ ‚Ññ{order_number}\n"
                f"`–ì–æ—Ä–æ–¥: {category.name}`\n"
                f"`–†–∞–π–æ–Ω: {area.name.rstrip()}`\n"
                f"`–¢–æ–≤–∞—Ä: {item.name}`\n"
                f"`–¢–∏–ø –∫–ª–∞–¥–∞: {stash_type}`\n"
                f"`–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {item.price}‚ÇΩ`\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                "*–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*")
        await callback.message.edit_text(text=text, reply_markup=await kb.create_payment_buttons(), parse_mode='Markdown')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        order_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}, –¢–æ–≤–∞—Ä: {item.name}, –†–∞–π–æ–Ω: {area.name}"
        await bot.send_message(tg_admin[0], order_info)

    
    elif callback.data.startswith('pay_sbp'):
        order_number = state_data.get('order_number')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        item = await get_item_by_id(item_id)
        if item is None:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        text = (f"<b>–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - </b><code>‚Ññ{order_number}</code>\n"
        "–í—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç.\n"
        "–í—Å–µ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–Ω—è—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–∞.\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Å—É–º–º—É <u>{item.price}‚ÇΩ</u> –ø–æ –Ω–æ–º–µ—Ä—É:\n\n"
        f"<code>{spb_info[0]}</code>\n"
        f"{spb_info[1]}\n"
        f"{spb_info[2]}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –±–æ—Ç—É\n"
        "–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"</b>.\n"
        "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n"
        "<b>–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!</b>")

        await state.update_data(payment_method='sbp')
        await callback.message.edit_text(text=text, reply_markup=await kb.create_sbp_buttons(), parse_mode='HTML')
    
    elif callback.data.startswith('pay_usdt'):
        order_number = state_data.get('order_number')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        item = await get_item_by_id(item_id)
        if item is None:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        text = (f"<b>–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - </b><code>‚Ññ{order_number}</code>\n"
        "–í—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç.\n"
        "–í—Å–µ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–Ω—è—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–∞.\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É <u>{item.price // 90}</u> USDT –ø–æ –∫–æ—à–µ–ª—å–∫—É:\n\n"
        f"{trc_info}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à-—Å—Å—ã–ª–∫—É –±–æ—Ç—É\n"
        "–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"</b>.\n"
        "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n"
        "<b>–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!</b>")

        await state.update_data(payment_method='usdt')
        await callback.message.edit_text(text=text, reply_markup=await kb.create_sbp_buttons(), parse_mode='HTML')

    elif callback.data.startswith('pay_btc'):
        order_number = state_data.get('order_number')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        item = await get_item_by_id(item_id)
        if item is None:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        text = (f"<b>–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - </b><code>‚Ññ{order_number}</code>\n"
        "–í—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç.\n"
        "–í—Å–µ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–Ω—è—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–∞.\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É <u>{item.price / 6000000} BTC</u> –ø–æ –∫–æ—à–µ–ª—å–∫—É:\n\n"
        f"{btc_info}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à-—Å—Å—ã–ª–∫—É –±–æ—Ç—É\n"
        "–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"</b>.\n"
        "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n"
        "<b>–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!</b>")

        await state.update_data(payment_method='btc')
        await callback.message.edit_text(text=text, reply_markup=await kb.create_sbp_buttons(), parse_mode='HTML')

async def start_check_payment(message: Message, state: FSMContext, payment_method: str, answer_text: str):
    await state.set_state(CheckPayment.user_message)
    await state.update_data(payment_method=payment_method)
    await message.answer(answer_text)

@router.callback_query(F.data.startswith('pay_'))
async def choose_payment_method(callback: CallbackQuery, state: FSMContext):
    payment_method = callback.data.split('_')[1]
    await state.update_data(payment_method=payment_method)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(OrderProcess.payment_proof)
    await callback.answer('')
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —Ö—ç—à-—Å—Å—ã–ª–∫—É: ')


@router.message(F.photo | F.text)
async def handle_payment_proof(message: Message, state: FSMContext):
    payment_proof = message.photo[-1].file_id if message.photo else message.text
    await state.update_data(payment_proof=payment_proof)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —Ö—ç—à-—Å—Å—ã–ª–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_data = await state.get_data()
    user_id = message.from_user.id
    item_id = state_data.get('item')
    area_id = state_data.get('area')
    order_number = state_data.get('order_number')
    payment_method = state_data.get('payment_method')
    payment_proof = state_data.get('payment_proof')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, —Ä–∞–π–æ–Ω–µ –∏ –≥–æ—Ä–æ–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item = await get_item_by_id(item_id)
    area = await get_area_by_id(area_id)
    city = await get_category_by_id(area.category)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    if item is None or area is None or city is None:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä, —Ä–∞–π–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω—É
    order_info = (f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ*\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"–ó–∞–∫–∞–∑ ‚Ññ`{order_number}`\n"
                f"`–ì–æ—Ä–æ–¥: {city.name}`\n"
                f"`–†–∞–π–æ–Ω: {area.name.rstrip()}`\n"
                f"`–¢–æ–≤–∞—Ä: {item.name}`\n"
                f"`–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {item.price}‚ÇΩ`\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
    if message.photo:
        await bot.send_photo(chat_id=tg_admin[0], photo=payment_proof, caption=order_info, reply_markup=await kb.create_payment_confirmation_buttons(order_number), parse_mode='Markdown')
    else:
        order_info += f", –ö–≤–∏—Ç–∞–Ω—Ü–∏—è/—Ö—ç—à: `{payment_proof}`"
        await bot.send_message(tg_admin[0], order_info, reply_markup=await kb.create_payment_confirmation_buttons(order_number), parse_mode='Markdown')

    await state.set_state(None)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ set_state(None) –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è




@router.callback_query(F.data == 'check_payment')
async def check_payment(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@router.callback_query(F.data == 'cancel_order')
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã:',
                                     reply_markup=await kb.generate_cities_button())
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑.", show_alert=True)

@router.callback_query(F.data.startswith('another_district'))
async def another_district(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    item_id = state_data.get('item')
    item = await get_item_by_id(item_id)
    if item is None:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: ', reply_markup=await kb.generate_areas_button(item.category))
    await callback.answer()

@router.callback_query(F.data == 'basket')
async def show_basket(callback: CallbackQuery):
    await callback.answer('–í—ã –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–∫—É.', show_alert=True)

@router.callback_query(F.data == 'work')
async def show_feedback(callback: CallbackQuery):
    text = """
    –í–∞–∫–∞–Ω—Å–∏–∏:
‚û°Ô∏èüö∂üèº‚Äç‚ôÄÔ∏è–ü–ï–®–ò–ô –ö–£–†–¨–ï–†: –æ—Ç 1200 $ –≤ –Ω–µ–¥–µ–ª—é üö∂üèº‚Äç‚ôÄÔ∏è
–ó–∞—Ä–∞–±–æ—Ç–∞–π 400 —Ç—ã—Å—è—á —É–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
‚û°Ô∏èüöó –í–û–î–ò–¢–ï–õ–¨: –æ—Ç 1000$ –¥–æ 4000$ –∑–∞ –ø–æ–µ–∑–¥–∫—É üöó
–ó–∞—Ä–∞–±–æ—Ç–∞–π —É–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
‚û°Ô∏è –ì—Ä–∞—Ñ–∏—Ç—á–∏–∫ / –¢—Ä–∞—Ñ–æ—Ä–µ—Ç—á–∏–∫
-–û–ø–ª–∞—Ç–∞ –æ—Ç 25 –Ω–∞–¥–ø–∏—Å–µ–π –∏–ª–∏ —Ç—ç–≥–æ–≤
1 –Ω–∞–¥–ø–∏—Å—å 7$
1 —Ç—ç–≥ 4$
1 –Ω–∞–∫–ª–µ–π–∫–∞ 3$
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚òëÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –º–∞–ª–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É 
‚òëÔ∏è –£–º–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚òëÔ∏è –ñ–µ–ª–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    """
    await callback.message.edit_text(text, reply_markup=await kb.work_keyboard())

@router.callback_query(F.data == 'to_item')
async def back_to_items(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    city_id = data.get('city')
    if city_id is not None:
        items = await get_items_by_city(city_id)
        await callback.answer('')
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ', reply_markup=await kb.generate_itema_button(items))
    else:
        await callback.answer('–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.')
        
@router.callback_query(F.data == 'support_work')
async def support_work(callback: CallbackQuery):
    text = f"""
‚ñ™Ô∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?
‚ñ™Ô∏è–°–∞–ø–ø–æ—Ä—Ç —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç!

üòé–û–ø–µ—Ä–∞—Ç–æ—Ä: <a href="{operator_link}">{operator_username}</a>


‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ‚û°Ô∏è <a href="{channel_link}">–ù–ê–® –ö–ê–ù–ê–õ</a> —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
<a href="{image_url}">&#8205;</a>

–í—Å—Ç—É–ø–∏—Ç–µ –≤ ‚û°Ô∏è <a href="{chat_link}">–ù–ê–® –ß–ê–¢</a> —Å –æ—Ç–∑—ã–≤–∞–º–∏

    """
    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=await kb.return_keyboarr())